rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // Helper Functions
    // =====================================================================

    function isAuthenticated() {
      return request.auth != null;
    }

    function isMember(groupId) {
      return isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.participantUids;
    }
    
    function isBecomingMember() {
      return isAuthenticated() && request.auth.uid in request.resource.data.participantUids;
    }

    function isAdmin(groupId) {
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return isMember(groupId) && groupData.participants.exists(p, p.uid == request.auth.uid && p.role == 'admin');
    }

    function isValidNewGroup() {
      let group = request.resource.data;
      let creatorUid = request.auth.uid;
      let creatorParticipant = group.participants[0];
      
      // FINAL FIX: All instances of '.size()' have been replaced with the correct 'size()' function.
      return group.ownerUid == creatorUid
          && size(group.participants) == 1
          && creatorParticipant.uid == creatorUid
          && creatorParticipant.role == 'admin'
          && size(group.turnOrder) == 1
          && group.turnOrder[0] == creatorParticipant.id
          && size(group.participantUids) == 1
          && group.participantUids[0] == creatorUid;
    }
    
    function newAdminCountIsAtLeastOne() {
        return size(request.resource.data.participants.filter(p, p.role == 'admin')) >= 1;
    }
    
    function canUndo(groupId, logId) {
        let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
        let logData = get(/databases/$(database)/documents/groups/$(groupId)/turnLog/$(logId)).data;
        let isUserAdmin = isAdmin(groupId);
        let isActor = request.auth.uid == logData.actorUid;
        let isSubject = groupData.participants.exists(p, p.id == logData.participantId && p.uid == request.auth.uid);
        return isUserAdmin || isActor || isSubject;
    }

    // =====================================================================
    // Collection Rules
    // =====================================================================

    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /groups/{groupId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participantUids;
      
      allow create: if isAuthenticated() && isValidNewGroup();
      
      allow update: if (isAdmin(groupId) && newAdminCountIsAtLeastOne())
                      || (isAuthenticated() && !isMember(groupId) && isBecomingMember())
                      || (isMember(groupId) && !isBecomingMember() && newAdminCountIsAtLeastOne());

      allow delete: if isAdmin(groupId);
      
      match /turnLog/{logId} {
        allow read: if isAuthenticated() && 
                      (
                        ('_participantUids' in resource.data && request.auth.uid in resource.data._participantUids)
                        ||
                        (!('_participantUids' in resource.data) && isMember(groupId))
                      );
        
        allow create: if isMember(groupId);
        
        allow update: if canUndo(groupId, logId)
                      && request.resource.data.isUndone == true
                      && resource.data.isUndone == false;

        allow delete: if false;
      }
    }
  }
}