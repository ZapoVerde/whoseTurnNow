rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // SECTION 1: CORE HELPER FUNCTIONS
    // =====================================================================

    function isAuthenticated() { return request.auth != null; }

    function isMember(groupData) {
      return request.auth.uid in groupData.participantUids;
    }

    function isAdmin(groupData) {
      return request.auth.uid in groupData.adminUids;
    }

    function isMemberOfParentGroup(groupId) {
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return isMember(groupData);
    }
    
    // --- THIS IS A NEW, MORE PRECISE HELPER FUNCTION ---
    // Checks if the user is a member before the change, but not after.
    function isLeavingGroup() {
      return isMember(resource.data) && !isMember(request.resource.data);
    }
    // --- END NEW FUNCTION ---

    function isJoiningGroup() {
      return !isMember(resource.data) && isMember(request.resource.data);
    }
    
    function lastAdminRuleIsSatisfied() {
      // The group must have at least one admin after the change is made.
      return request.resource.data.adminUids.size() >= 1;
    }

    // --- THIS IS ANOTHER NEW HELPER FUNCTION ---
    // Ensures a non-admin is only changing fields related to the participant roster.
    function isOnlyModifyingMembership() {
      return request.writeFields.hasOnly(['participants', 'turnOrder', 'participantUids', 'adminUids']);
    }
    // --- END NEW FUNCTION ---

    function isValidNewGroup() {
      let group = request.resource.data;
      let creatorUid = request.auth.uid;
      return group.ownerUid == creatorUid
          && group.participants[0].uid == creatorUid
          && group.participants[0].role == 'admin'
          && group.participantUids[creatorUid] == true
          && group.adminUids[creatorUid] == true
          && group.adminUids.size() == 1;
    }

    // =====================================================================
    // SECTION 2: COLLECTION-LEVEL RULES
    // =====================================================================

    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /groups/{groupId} {
      allow get, list: if isMemberOfParentGroup(groupId);
      allow create: if isAuthenticated() && isValidNewGroup();

      // --- THIS IS THE FINAL, CORRECTED RULE ---
      // An update is now allowed if ANY of the following are true:
      // 1. The user is an admin making a valid change.
      // 2. A new user is joining the group.
      // 3. An existing member is leaving the group (and they are not the last admin).
      // 4. An existing member is performing a valid roster/turn action (like taking a turn).
      allow update: if (isAdmin(resource.data) && lastAdminRuleIsSatisfied())
                      || isJoiningGroup()
                      || (isLeavingGroup() && lastAdminRuleIsSatisfied() && isOnlyModifyingMembership())
                      || (isMember(resource.data) && isOnlyModifyingMembership());
      // --- END FIX ---
                      
      allow delete: if isAdmin(get(/databases/$(database)/documents/groups/$(groupId)).data);
      
      match /turnLog/{logId} {
        allow read, create: if isMemberOfParentGroup(groupId);
        allow update: if isAdmin(get(/databases/$(database)/documents/groups/$(groupId)).data)
                      && request.resource.data.isUndone == true
                      && resource.data.isUndone == false;
        allow delete: if false;
      }
    }
  }
}