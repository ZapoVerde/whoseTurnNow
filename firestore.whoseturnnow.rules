rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // SECTION 1: CORE HELPER FUNCTIONS (UNCHANGED)
    // =====================================================================

    function isAuthenticated() { return request.auth != null; }

    function requesterIsAdmin() {
      return request.auth.uid in resource.data.adminUids;
    }

    function requesterIsParentGroupAdmin(groupId) {
        let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
        return request.auth.uid in groupData.adminUids;
    }

    function isUserJoiningGroup() {
      return !(request.auth.uid in resource.data.participantUids) && (request.auth.uid in request.resource.data.participantUids);
    }

    function lastAdminRuleIsSatisfied() {
      return request.resource.data.adminUids.size() >= 1;
    }

    function isValidNewGroup() {
      let group = request.resource.data;
      let creatorUid = request.auth.uid;
      return group.ownerUid == creatorUid
          && group.participants[0].uid == creatorUid
          && group.participants[0].role == 'admin'
          && group.participantUids[creatorUid] == true
          && group.adminUids[creatorUid] == true
          && group.adminUids.size() == 1;
    }

    function isMemberOfParentGroup(groupId) {
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return request.auth.uid in groupData.participantUids;
    }

    // =====================================================================
    // SECTION 2: COLLECTION-LEVEL RULES (CHANGED)
    // =====================================================================

    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /groups/{groupId} {
      // --- THIS IS THE FIX ---
      // The 'read' permission has been split into its granular components.

      // 'get': Allows a single document read via getDoc(). Any authenticated
      // user can perform this action, which is necessary for the InvitationScreen
      // to fetch public group details like the name.
      allow get: if isAuthenticated();

      // 'list': Allows queries and real-time listeners (onSnapshot). This
      // remains strictly locked down to members only, protecting all real-time
      // and sensitive group data on the Dashboard and GroupDetail screens.
      allow list: if isAuthenticated() && request.auth.uid in resource.data.participantUids;
      
      // All write rules remain unchanged.
      allow create: if isAuthenticated() && isValidNewGroup();
      allow update: if (requesterIsAdmin() && lastAdminRuleIsSatisfied()) || isUserJoiningGroup();
      allow delete: if requesterIsParentGroupAdmin(groupId);
      
      // Subcollection Rules (unchanged)
      match /turnLog/{logId} {
        allow read, create: if isMemberOfParentGroup(groupId);
        allow update: if requesterIsParentGroupAdmin(groupId)
                      && request.resource.data.isUndone == true
                      && resource.data.isUndone == false;
        allow delete: if false;
      }
    }
  }
}