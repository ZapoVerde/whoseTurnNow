rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // SECTION 1: CORE HELPER FUNCTIONS (UNCHANGED)
    // =====================================================================

    function isAuthenticated() { return request.auth != null; }

    function requesterIsAdmin() {
      return request.auth.uid in resource.data.adminUids;
    }

    function requesterIsParentGroupAdmin(groupId) {
        let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
        return request.auth.uid in groupData.adminUids;
    }

    function isUserJoiningGroup() {
      return !(request.auth.uid in resource.data.participantUids) && (request.auth.uid in request.resource.data.participantUids);
    }

    function lastAdminRuleIsSatisfied() {
      return request.resource.data.adminUids.size() >= 1;
    }

    function isValidNewGroup() {
      let group = request.resource.data;
      let creatorUid = request.auth.uid;
      return group.ownerUid == creatorUid
          && group.participants[0].uid == creatorUid
          && group.participants[0].role == 'admin'
          && group.participantUids[creatorUid] == true
          && group.adminUids[creatorUid] == true
          && group.adminUids.size() == 1;
    }

    function isMemberOfParentGroup(groupId) {
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return request.auth.uid in groupData.participantUids;
    }

    // =====================================================================
    // SECTION 2: COLLECTION-LEVEL RULES (CHANGED)
    // =====================================================================

    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /groups/{groupId} {
      
      //This change allows any user, including an unauthenticated visitor who has just clicked an invitation link, to perform a single, one-time read (`get`) of the group document.

      //This is secure because the rule for establishing a real-time listener (`list`) remains unchanged and strictly enforced, allowing only authenticated members of the group to see live updates. This change directly enables the `InvitationScreen` to fetch the group's name and display a proper welcome message, resolving the "Could not load invitation details" error.
      allow get: if true;

      // 'list': Allows real-time listeners and queries. This remains
      // strictly locked down to members of the group.
      allow list: if isAuthenticated() && request.auth.uid in resource.data.participantUids;
      
      // All write rules remain unchanged
      allow create: if isAuthenticated() && isValidNewGroup();
      allow update: if (requesterIsAdmin() && lastAdminRuleIsSatisfied()) || isUserJoiningGroup();
      allow delete: if requesterIsParentGroupAdmin(groupId);
      
      match /turnLog/{logId} {
        allow read, create: if isMemberOfParentGroup(groupId);
        allow update: if requesterIsParentGroupAdmin(groupId)
                      && request.resource.data.isUndone == true
                      && resource.data.isUndone == false;
        allow delete: if false;
      }
    }
  }
}